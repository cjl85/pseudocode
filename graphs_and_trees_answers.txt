1) What is a binary tree and what makes it unique to other trees?

A binary tree is a data structure that has Nodes. These Nodes
are also data structures that consist of a value and the ability to point to other adjacent members.

It is unique because every Node can only have up to two child Nodes.

2) What is a heuristic?

Heuristic is a method designed to resolve a problem as quick as
possible when classic methods take too long.

Completeness, accuracy, and optimization are the trade offs for
the speed that heuristic functions provide.

3) What is another problem besides the shortest-path problem that requires the use of heuristics?

Making an educated guess can be an example of the use of heuristics. A conclusion is reached in a relatively short amount of time without the time/ability to do more research.

4) What is the difference between a depth-first search and a breadth-first search?

Depth-first Search: It starts at the root node and goes all the way down a single branch searching for the desired element. If the element is not found, it backtracks and start searching another branch all the way down again.

Breadth-first Search: It starts at the root node and explores the row of nodes in each level before moving on to the next row.

5) Explain in your own words what an undirected, a-cyclic, unweighted graph is.

This is a graph that doesn't have an absolute edge. The connection
between Nodes are not clear. It does not form loops and also does
not assign any costs of travel in between Nodes.

6) What kind of graph is a binary search tree?

Directed A-cyclic Unweighted

//////////////////////////
1)

class Node {
  constructor(value, left = null, right = null) {

    this.value  = value;
    this.left   = left;
    this.right  = right;
  }
}

class BST {
  constructor() {
    this.root = null;
  }
  add(value) {
    const node = this.root;
    if (node === null) {
      this.root = new Node(value);
      return;
    } else {
      const searchTree = function(node) {
        if (value < node.value) {
          if (node.left === null) {
            node.left = new Node(value);
            return;
          } else if (node.left !== null) {
            return searchTree(node.left);
          }
        } else if (value > node.value) {
          if (node.right === null) {
            node.right = new Node(value);
            return;
          } else if (node.right !== null) {
            return searchTree(node.right);
          }
        } else {
          return null;
        }
      };
      return searchTree(node);
    }
  }
  find(value) {
    let current = this.root;
    while (current.value !== value) {

      if (value < current.value) {
        current = current.left;
      } else {
        current = current.right;
      }
      if (current === null) {
        return null;
      }
    }
    return current;
}
  isPresent(value) {
    let current = this.root;
    while (current) {
      if (value === current.value) {
        return true;
      }
      if (value < current.value) {
        current = current.left;
      } else {
        current = current.right;
      }
    }
    return false;
  }

}

const bst = new BST();

bst.add(10);
bst.add(3);
bst.add(14);
bst.add(6);
bst.add(1);
bst.add(13);
bst.add(7);
bst.add(4);

console.log(bst.isPresent(10));
console.log(bst.isPresent(23));
console.log(bst.isPresent(3));

2)

class Node {
  constructor(value) {
    this.value  = value;
    this.left   = null;
    this.right  = null;
  }
}

class BinarySearchTree {
  constructor() {
    this.root = null;
  }

  findDistanceBetweenNodes(root, num1, num2) {
    let lowestCommonAncestor   = this.findCommonAncestor(root, num1, num2);
    let distanceNode1ToRoot    = this.countAncestors(lowestCommonAncestor, num1);
    let distanceNode2ToRoot    = this.countAncestors(lowestCommonAncestor, num2);
    let distanceRootToAncestor = this.countAncestors(root,lowestCommonAncestor);

    let totalDistance = (distanceNode1ToRoot + distanceNode2ToRoot) - (2 * distanceRootToAncestor);
    return ('The distance between those two nodes is' + ' ' + totalDistance);
  }

  findCommonAncestor(root, num1, num2) {
    if (!root) return;
    let lowestCommonAncestor = root.value;
    if (num1 === lowestCommonAncestor || num2 === lowestCommonAncestor) {
      return lowestCommonAncestor;
    }
    if (num1 < lowestCommonAncestor && num2 < lowestCommonAncestor) {
      return this.findCommonAncestor(root.left, num1, num2);
    }
    if (num1 > lowestCommonAncestor && num2 > lowestCommonAncestor) {
      return this.findCommonAncestor(root.right, num1, num2);
    }
    return lowestCommonAncestor;
  }

  countAncestors(root, value) {
    let thisNode = this.root;
    let nodeCount = 0;
    while (thisNode) {
      if (value === thisNode.value) {
        return nodeCount;
      }
      thisNode = value < thisNode.value ? thisNode.left : thisNode.right;
      nodeCount++;
    }
  }

  getRootNode() {
    return this.root;
  }
 add(value) {
    const node = this.root;
    if (node === null) {
      this.root = new Node(value);
      return;
    } else {
      const searchTree = function(node) {
        if (value < node.value) {
          if (node.left === null) {
            node.left = new Node(value);
            return;
          } else if (node.left !== null) {
            return searchTree(node.left);
          }
        } else if (value > node.value) {
          if (node.right === null) {
            node.right = new Node(value);
            return;
          } else if (node.right !== null) {
            return searchTree(node.right);
          }
        } else {
          return null;
        }
      };
      return searchTree(node);
    }
  }

  find(value) {
    let current = this.root;
    while (current.value !== value) {

      if (value < current.value) {
        current = current.left;
      } else {
        current = current.right;
      }
      if (current === null) {
        return null;
      }
    }
    return current;
}

   isPresent(value) {
    let current = this.root;
    while (current) {
      if (value === current.value) {
        return true;
      }
      if (value < current.value) {
        current = current.left;
      } else {
        current = current.right;
      }
    }
    return false;
  }

}

let bst = new BinarySearchTree();

bst.add(8);
bst.add(10);
bst.add(3);
bst.add(14);
bst.add(6);
bst.add(1);
bst.add(13);
bst.add(7);
bst.add(4);

let root = bst.getRootNode();
bst.findDistanceBetweenNodes(root, 10, 4);
bst.findDistanceBetweenNodes(root, 10, 10);
