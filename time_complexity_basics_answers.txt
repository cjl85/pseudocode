1) What is time complexity and what is its relation to algorithms?

Time complexity is a function that estimates the time it takes to execute a program.

To determine the time complexity of an algorithm, add up how many instructions the algorithm will execute as a function of the size of its input, then simplify the expression to the largest term and drop any constants.

2) What is runtime?

Runtime can refer to the physical time duration of an algorithm, but is often used synonymously with time complexity.

3) How is the runtime of an algorithm calculated?

The runtime is calculated as a function of the variable n, where n is the input size, and f(n) is the rate the algorithm grows as the input size grows.

4) Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient.
Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

A) constant growth rate
B) logarithmic growth rate
C) linear growth rate
D) log-linear growth rate
X) cubic growth rate
E) quadratic growth rate
F) exponential growth rate

5) Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

An example of a linear growth rate could be a company that wants to give every employee a bonus check in their mailbox.

A linear growth rate would show that there would be one bonus check placed in each mailbox for every employee in the company.

6)

FOR each number in the array = n
IF number = target = 1

n + 1

Time complexity = 0(n)

7)

FOR each number in the array = n
FOR each number in the array = n
print "Hello" (affected by for loop) = n

Time complexity = 0(n)

8)

Time complexity = 0(2^n)

9)

Function linearSearch (#6) seems to be the most time efficient. 
